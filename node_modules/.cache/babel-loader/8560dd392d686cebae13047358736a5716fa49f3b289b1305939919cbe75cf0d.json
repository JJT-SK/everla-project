{"ast":null,"code":"var _jsxFileName = \"/Users/jackdooney/Everla Project/src/components/SignIn.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate, Link } from 'react-router-dom';\nimport { supabase } from '../supabase';\nimport './SignIn.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SignIn = () => {\n  _s();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [rememberMe, setRememberMe] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('Enter your details to sign-in');\n  const [connectionStatus, setConnectionStatus] = useState('Testing connection...');\n  const navigate = useNavigate();\n\n  // Test Supabase connection on component mount\n  useEffect(() => {\n    testSupabaseConnection();\n  }, []);\n\n  // Check for existing authenticated user and sync data\n  useEffect(() => {\n    const checkExistingUser = async () => {\n      try {\n        const {\n          data: {\n            user\n          }\n        } = await supabase.auth.getUser();\n        if (user) {\n          console.log('üîç Found existing authenticated user:', user.email);\n          console.log('User ID:', user.id);\n\n          // Sync user data to custom tables\n          await syncUserData(user);\n        }\n      } catch (error) {\n        console.error('Error checking existing user:', error);\n      }\n    };\n    checkExistingUser();\n  }, []);\n\n  // Load saved credentials on component mount\n  useEffect(() => {\n    const savedEmail = localStorage.getItem('rememberedEmail');\n    const savedPassword = localStorage.getItem('rememberedPassword');\n    const savedRememberMe = localStorage.getItem('rememberMe') === 'true';\n    if (savedRememberMe && savedEmail && savedPassword) {\n      setEmail(savedEmail);\n      setPassword(savedPassword);\n      setRememberMe(true);\n    }\n  }, []);\n  const testSupabaseConnection = async () => {\n    try {\n      // Test basic connection by getting the current user (should return null if not authenticated)\n      const {\n        data,\n        error\n      } = await supabase.auth.getUser();\n      if (error) {\n        console.error('Supabase connection error:', error);\n        setConnectionStatus('‚ùå Connection failed: ' + error.message);\n      } else {\n        console.log('Supabase connection successful');\n        setConnectionStatus('‚úÖ Connected to Supabase');\n\n        // Test database access by trying to query the users table\n        try {\n          const {\n            data: tableData,\n            error: tableError\n          } = await supabase.from('users').select('count').limit(1);\n          if (tableError) {\n            console.error('Table access error:', tableError);\n            setConnectionStatus('‚ö†Ô∏è Connected but table access issue: ' + tableError.message);\n          } else {\n            setConnectionStatus('‚úÖ Connected to Supabase and database');\n          }\n        } catch (tableError) {\n          console.error('Table test error:', tableError);\n          setConnectionStatus('‚ö†Ô∏è Connected but database access issue');\n        }\n      }\n    } catch (error) {\n      console.error('Connection test error:', error);\n      setConnectionStatus('‚ùå Connection failed: ' + error.message);\n    }\n  };\n  const syncUserData = async user => {\n    try {\n      console.log('üîÑ Syncing user data for:', user.email);\n\n      // Check if user exists in our custom tables\n      const {\n        data: existingUser,\n        error: userCheckError\n      } = await supabase.from('users').select('*').eq('id', user.id).single();\n      if (userCheckError && userCheckError.code === 'PGRST116') {\n        var _user$user_metadata;\n        // User doesn't exist in our table, create them\n        console.log('‚ö†Ô∏è User not found in custom table, creating...');\n        const {\n          error: userInsertError\n        } = await supabase.from('users').insert({\n          id: user.id,\n          email: user.email,\n          username: ((_user$user_metadata = user.user_metadata) === null || _user$user_metadata === void 0 ? void 0 : _user$user_metadata.username) || user.email.split('@')[0],\n          date_joined: new Date().toISOString()\n        });\n        if (userInsertError) {\n          console.error('‚ùå Error creating user in custom table:', userInsertError);\n        } else {\n          console.log('‚úÖ User created in custom table successfully');\n        }\n      } else if (userCheckError) {\n        console.error('‚ùå Error checking user data:', userCheckError);\n      } else {\n        console.log('‚úÖ User already exists in custom table');\n      }\n\n      // Check if profile exists\n      const {\n        data: existingProfile,\n        error: profileCheckError\n      } = await supabase.from('user_profiles').select('*').eq('user_id', user.id).single();\n      if (profileCheckError && profileCheckError.code === 'PGRST116') {\n        // Profile doesn't exist, create a default one\n        console.log('‚ö†Ô∏è Profile not found, creating default profile...');\n        const {\n          error: profileInsertError\n        } = await supabase.from('user_profiles').insert({\n          user_id: user.id,\n          gender: 'Other',\n          country: 'Unknown',\n          dob: new Date('1990-01-01').toISOString()\n        });\n        if (profileInsertError) {\n          console.error('‚ùå Error creating profile:', profileInsertError);\n        } else {\n          console.log('‚úÖ Default profile created successfully');\n        }\n      } else if (profileCheckError) {\n        console.error('‚ùå Error checking profile data:', profileCheckError);\n      } else {\n        console.log('‚úÖ Profile already exists in custom table');\n      }\n    } catch (error) {\n      console.error('‚ùå Error syncing user data:', error);\n    }\n  };\n  const handleSignIn = async e => {\n    e.preventDefault();\n    setIsLoading(true);\n    setErrorMessage('Enter your details to sign-in');\n    try {\n      const {\n        data,\n        error\n      } = await supabase.auth.signInWithPassword({\n        email: email,\n        password: password\n      });\n      if (error) {\n        if (error.message.includes('Invalid login credentials')) {\n          setErrorMessage('Invalid email or password. Please try again.');\n        } else if (error.message.includes('Email not confirmed')) {\n          setErrorMessage('Please verify your email address before signing in.');\n        } else {\n          setErrorMessage('An error occurred during sign in. Please try again.');\n        }\n        return;\n      }\n      if (data.user) {\n        console.log('‚úÖ User signed in successfully:', data.user.email);\n        console.log('User ID:', data.user.id);\n\n        // Handle remember me functionality\n        if (rememberMe) {\n          localStorage.setItem('rememberedEmail', email);\n          localStorage.setItem('rememberedPassword', password);\n          localStorage.setItem('rememberMe', 'true');\n        } else {\n          localStorage.removeItem('rememberedEmail');\n          localStorage.removeItem('rememberedPassword');\n          localStorage.removeItem('rememberMe');\n        }\n\n        // Check if user exists in our custom tables, if not, create them\n        try {\n          console.log('üîç Checking if user exists in custom tables...');\n\n          // Use the syncUserData function to ensure consistency\n          await syncUserData(data.user);\n        } catch (syncError) {\n          console.error('‚ùå Error syncing user data:', syncError);\n          // Don't fail the sign-in, just log the error\n        }\n\n        // Update last_login in the users table\n        try {\n          console.log('üîÑ Updating last_login...');\n          const {\n            error: updateError\n          } = await supabase.from('users').update({\n            last_login: new Date().toISOString()\n          }).eq('id', data.user.id);\n          if (updateError) {\n            console.error('‚ùå Error updating last_login:', updateError);\n          } else {\n            console.log('‚úÖ Last login updated successfully');\n          }\n        } catch (updateError) {\n          console.error('‚ùå Error updating last_login:', updateError);\n        }\n        console.log('üöÄ Navigating to home page...');\n        // Navigate to home page\n        navigate('/home');\n      }\n    } catch (error) {\n      console.error('‚ùå Sign in error:', error);\n      setErrorMessage('An unexpected error occurred. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"signin-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"signin-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"signin-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Welcome back\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"signin-subtitle\",\n          children: errorMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"connection-status\",\n          children: /*#__PURE__*/_jsxDEV(\"small\", {\n            children: connectionStatus\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSignIn,\n        className: \"signin-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"email\",\n            children: \"Email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"email\",\n            id: \"email\",\n            value: email,\n            onChange: e => setEmail(e.target.value),\n            placeholder: \"Enter your email\",\n            required: true,\n            className: \"form-input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"password\",\n            children: \"Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"password\",\n            id: \"password\",\n            value: password,\n            onChange: e => setPassword(e.target.value),\n            placeholder: \"Enter your password\",\n            required: true,\n            className: \"form-input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-options\",\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"checkbox-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: rememberMe,\n              onChange: e => setRememberMe(e.target.checked),\n              className: \"checkbox-input\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 278,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"checkmark\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 284,\n              columnNumber: 15\n            }, this), \"Remember me\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          disabled: isLoading,\n          className: \"signin-button\",\n          children: isLoading ? 'Signing in...' : 'Sign in'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"signin-footer\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Don't have an account?\", ' ', /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/signup\",\n            className: \"link\",\n            children: \"Sign up\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 239,\n    columnNumber: 5\n  }, this);\n};\n_s(SignIn, \"S2wlbJ4GbLqiltgl/P/q85VI9Dk=\", false, function () {\n  return [useNavigate];\n});\n_c = SignIn;\nexport default SignIn;\nvar _c;\n$RefreshReg$(_c, \"SignIn\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","Link","supabase","jsxDEV","_jsxDEV","SignIn","_s","email","setEmail","password","setPassword","rememberMe","setRememberMe","isLoading","setIsLoading","errorMessage","setErrorMessage","connectionStatus","setConnectionStatus","navigate","testSupabaseConnection","checkExistingUser","data","user","auth","getUser","console","log","id","syncUserData","error","savedEmail","localStorage","getItem","savedPassword","savedRememberMe","message","tableData","tableError","from","select","limit","existingUser","userCheckError","eq","single","code","_user$user_metadata","userInsertError","insert","username","user_metadata","split","date_joined","Date","toISOString","existingProfile","profileCheckError","profileInsertError","user_id","gender","country","dob","handleSignIn","e","preventDefault","signInWithPassword","includes","setItem","removeItem","syncError","updateError","update","last_login","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","type","value","onChange","target","placeholder","required","checked","disabled","to","_c","$RefreshReg$"],"sources":["/Users/jackdooney/Everla Project/src/components/SignIn.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate, Link } from 'react-router-dom';\nimport { supabase } from '../supabase';\nimport './SignIn.css';\n\nconst SignIn = () => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [rememberMe, setRememberMe] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('Enter your details to sign-in');\n  const [connectionStatus, setConnectionStatus] = useState('Testing connection...');\n  const navigate = useNavigate();\n\n  // Test Supabase connection on component mount\n  useEffect(() => {\n    testSupabaseConnection();\n  }, []);\n\n  // Check for existing authenticated user and sync data\n  useEffect(() => {\n    const checkExistingUser = async () => {\n      try {\n        const { data: { user } } = await supabase.auth.getUser();\n        if (user) {\n          console.log('üîç Found existing authenticated user:', user.email);\n          console.log('User ID:', user.id);\n          \n          // Sync user data to custom tables\n          await syncUserData(user);\n        }\n      } catch (error) {\n        console.error('Error checking existing user:', error);\n      }\n    };\n\n    checkExistingUser();\n  }, []);\n\n  // Load saved credentials on component mount\n  useEffect(() => {\n    const savedEmail = localStorage.getItem('rememberedEmail');\n    const savedPassword = localStorage.getItem('rememberedPassword');\n    const savedRememberMe = localStorage.getItem('rememberMe') === 'true';\n    \n    if (savedRememberMe && savedEmail && savedPassword) {\n      setEmail(savedEmail);\n      setPassword(savedPassword);\n      setRememberMe(true);\n    }\n  }, []);\n\n  const testSupabaseConnection = async () => {\n    try {\n      // Test basic connection by getting the current user (should return null if not authenticated)\n      const { data, error } = await supabase.auth.getUser();\n      \n      if (error) {\n        console.error('Supabase connection error:', error);\n        setConnectionStatus('‚ùå Connection failed: ' + error.message);\n      } else {\n        console.log('Supabase connection successful');\n        setConnectionStatus('‚úÖ Connected to Supabase');\n        \n        // Test database access by trying to query the users table\n        try {\n          const { data: tableData, error: tableError } = await supabase\n            .from('users')\n            .select('count')\n            .limit(1);\n          \n          if (tableError) {\n            console.error('Table access error:', tableError);\n            setConnectionStatus('‚ö†Ô∏è Connected but table access issue: ' + tableError.message);\n          } else {\n            setConnectionStatus('‚úÖ Connected to Supabase and database');\n          }\n        } catch (tableError) {\n          console.error('Table test error:', tableError);\n          setConnectionStatus('‚ö†Ô∏è Connected but database access issue');\n        }\n      }\n    } catch (error) {\n      console.error('Connection test error:', error);\n      setConnectionStatus('‚ùå Connection failed: ' + error.message);\n    }\n  };\n\n  const syncUserData = async (user) => {\n    try {\n      console.log('üîÑ Syncing user data for:', user.email);\n      \n      // Check if user exists in our custom tables\n      const { data: existingUser, error: userCheckError } = await supabase\n        .from('users')\n        .select('*')\n        .eq('id', user.id)\n        .single();\n\n      if (userCheckError && userCheckError.code === 'PGRST116') {\n        // User doesn't exist in our table, create them\n        console.log('‚ö†Ô∏è User not found in custom table, creating...');\n        \n        const { error: userInsertError } = await supabase\n          .from('users')\n          .insert({\n            id: user.id,\n            email: user.email,\n            username: user.user_metadata?.username || user.email.split('@')[0],\n            date_joined: new Date().toISOString()\n          });\n\n        if (userInsertError) {\n          console.error('‚ùå Error creating user in custom table:', userInsertError);\n        } else {\n          console.log('‚úÖ User created in custom table successfully');\n        }\n      } else if (userCheckError) {\n        console.error('‚ùå Error checking user data:', userCheckError);\n      } else {\n        console.log('‚úÖ User already exists in custom table');\n      }\n\n      // Check if profile exists\n      const { data: existingProfile, error: profileCheckError } = await supabase\n        .from('user_profiles')\n        .select('*')\n        .eq('user_id', user.id)\n        .single();\n\n      if (profileCheckError && profileCheckError.code === 'PGRST116') {\n        // Profile doesn't exist, create a default one\n        console.log('‚ö†Ô∏è Profile not found, creating default profile...');\n        \n        const { error: profileInsertError } = await supabase\n          .from('user_profiles')\n          .insert({\n            user_id: user.id,\n            gender: 'Other',\n            country: 'Unknown',\n            dob: new Date('1990-01-01').toISOString()\n          });\n\n        if (profileInsertError) {\n          console.error('‚ùå Error creating profile:', profileInsertError);\n        } else {\n          console.log('‚úÖ Default profile created successfully');\n        }\n      } else if (profileCheckError) {\n        console.error('‚ùå Error checking profile data:', profileCheckError);\n      } else {\n        console.log('‚úÖ Profile already exists in custom table');\n      }\n    } catch (error) {\n      console.error('‚ùå Error syncing user data:', error);\n    }\n  };\n\n  const handleSignIn = async (e) => {\n    e.preventDefault();\n    setIsLoading(true);\n    setErrorMessage('Enter your details to sign-in');\n\n    try {\n      const { data, error } = await supabase.auth.signInWithPassword({\n        email: email,\n        password: password,\n      });\n\n      if (error) {\n        if (error.message.includes('Invalid login credentials')) {\n          setErrorMessage('Invalid email or password. Please try again.');\n        } else if (error.message.includes('Email not confirmed')) {\n          setErrorMessage('Please verify your email address before signing in.');\n        } else {\n          setErrorMessage('An error occurred during sign in. Please try again.');\n        }\n        return;\n      }\n\n      if (data.user) {\n        console.log('‚úÖ User signed in successfully:', data.user.email);\n        console.log('User ID:', data.user.id);\n\n        // Handle remember me functionality\n        if (rememberMe) {\n          localStorage.setItem('rememberedEmail', email);\n          localStorage.setItem('rememberedPassword', password);\n          localStorage.setItem('rememberMe', 'true');\n        } else {\n          localStorage.removeItem('rememberedEmail');\n          localStorage.removeItem('rememberedPassword');\n          localStorage.removeItem('rememberMe');\n        }\n\n        // Check if user exists in our custom tables, if not, create them\n        try {\n          console.log('üîç Checking if user exists in custom tables...');\n          \n          // Use the syncUserData function to ensure consistency\n          await syncUserData(data.user);\n          \n        } catch (syncError) {\n          console.error('‚ùå Error syncing user data:', syncError);\n          // Don't fail the sign-in, just log the error\n        }\n\n        // Update last_login in the users table\n        try {\n          console.log('üîÑ Updating last_login...');\n          \n          const { error: updateError } = await supabase\n            .from('users')\n            .update({ last_login: new Date().toISOString() })\n            .eq('id', data.user.id);\n\n          if (updateError) {\n            console.error('‚ùå Error updating last_login:', updateError);\n          } else {\n            console.log('‚úÖ Last login updated successfully');\n          }\n        } catch (updateError) {\n          console.error('‚ùå Error updating last_login:', updateError);\n        }\n\n        console.log('üöÄ Navigating to home page...');\n        // Navigate to home page\n        navigate('/home');\n      }\n    } catch (error) {\n      console.error('‚ùå Sign in error:', error);\n      setErrorMessage('An unexpected error occurred. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"signin-container\">\n      <div className=\"signin-card\">\n        <div className=\"signin-header\">\n          <h1>Welcome back</h1>\n          <p className=\"signin-subtitle\">{errorMessage}</p>\n          <div className=\"connection-status\">\n            <small>{connectionStatus}</small>\n          </div>\n        </div>\n\n        <form onSubmit={handleSignIn} className=\"signin-form\">\n          <div className=\"form-group\">\n            <label htmlFor=\"email\">Email</label>\n            <input\n              type=\"email\"\n              id=\"email\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              placeholder=\"Enter your email\"\n              required\n              className=\"form-input\"\n            />\n          </div>\n\n          <div className=\"form-group\">\n            <label htmlFor=\"password\">Password</label>\n            <input\n              type=\"password\"\n              id=\"password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              placeholder=\"Enter your password\"\n              required\n              className=\"form-input\"\n            />\n          </div>\n\n          <div className=\"form-options\">\n            <label className=\"checkbox-container\">\n              <input\n                type=\"checkbox\"\n                checked={rememberMe}\n                onChange={(e) => setRememberMe(e.target.checked)}\n                className=\"checkbox-input\"\n              />\n              <span className=\"checkmark\"></span>\n              Remember me\n            </label>\n          </div>\n\n          <button\n            type=\"submit\"\n            disabled={isLoading}\n            className=\"signin-button\"\n          >\n            {isLoading ? 'Signing in...' : 'Sign in'}\n          </button>\n        </form>\n\n        <div className=\"signin-footer\">\n          <p>\n            Don't have an account?{' '}\n            <Link to=\"/signup\" className=\"link\">\n              Sign up\n            </Link>\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SignIn; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}