{"ast":null,"code":"var _jsxFileName = \"/Users/jackdooney/Everla Project/src/components/SignIn.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate, Link } from 'react-router-dom';\nimport { supabase } from '../supabase';\nimport './SignIn.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SignIn = () => {\n  _s();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [rememberMe, setRememberMe] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('Enter your details to sign-in');\n  const [connectionStatus, setConnectionStatus] = useState('Testing connection...');\n  const navigate = useNavigate();\n\n  // Test Supabase connection on component mount\n  useEffect(() => {\n    testSupabaseConnection();\n  }, []);\n\n  // Load saved credentials on component mount\n  useEffect(() => {\n    const savedEmail = localStorage.getItem('rememberedEmail');\n    const savedPassword = localStorage.getItem('rememberedPassword');\n    const savedRememberMe = localStorage.getItem('rememberMe') === 'true';\n    if (savedRememberMe && savedEmail && savedPassword) {\n      setEmail(savedEmail);\n      setPassword(savedPassword);\n      setRememberMe(true);\n    }\n  }, []);\n  const testSupabaseConnection = async () => {\n    try {\n      // Test basic connection by getting the current user (should return null if not authenticated)\n      const {\n        data,\n        error\n      } = await supabase.auth.getUser();\n      if (error) {\n        console.error('Supabase connection error:', error);\n        setConnectionStatus('❌ Connection failed: ' + error.message);\n      } else {\n        console.log('Supabase connection successful');\n        setConnectionStatus('✅ Connected to Supabase');\n\n        // Test database access by trying to query the users table\n        try {\n          const {\n            data: tableData,\n            error: tableError\n          } = await supabase.from('users').select('count').limit(1);\n          if (tableError) {\n            console.error('Table access error:', tableError);\n            setConnectionStatus('⚠️ Connected but table access issue: ' + tableError.message);\n          } else {\n            setConnectionStatus('✅ Connected to Supabase and database');\n          }\n        } catch (tableError) {\n          console.error('Table test error:', tableError);\n          setConnectionStatus('⚠️ Connected but database access issue');\n        }\n      }\n    } catch (error) {\n      console.error('Connection test error:', error);\n      setConnectionStatus('❌ Connection failed: ' + error.message);\n    }\n  };\n  const handleSignIn = async e => {\n    e.preventDefault();\n    setIsLoading(true);\n    setErrorMessage('Enter your details to sign-in');\n    try {\n      const {\n        data,\n        error\n      } = await supabase.auth.signInWithPassword({\n        email: email,\n        password: password\n      });\n      if (error) {\n        if (error.message.includes('Invalid login credentials')) {\n          setErrorMessage('Invalid email or password. Please try again.');\n        } else if (error.message.includes('Email not confirmed')) {\n          setErrorMessage('Please verify your email address before signing in.');\n        } else {\n          setErrorMessage('An error occurred during sign in. Please try again.');\n        }\n        return;\n      }\n      if (data.user) {\n        // Handle remember me functionality\n        if (rememberMe) {\n          localStorage.setItem('rememberedEmail', email);\n          localStorage.setItem('rememberedPassword', password);\n          localStorage.setItem('rememberMe', 'true');\n        } else {\n          localStorage.removeItem('rememberedEmail');\n          localStorage.removeItem('rememberedPassword');\n          localStorage.removeItem('rememberMe');\n        }\n\n        // Check if user exists in our custom tables, if not, create them\n        try {\n          console.log('=== DATA SYNC START ===');\n          console.log('User ID:', data.user.id);\n          console.log('User Email:', data.user.email);\n          console.log('User Metadata:', data.user.user_metadata);\n\n          // First, check if user exists in our users table\n          console.log('Checking if user exists in users table...');\n          const {\n            data: existingUser,\n            error: userCheckError\n          } = await supabase.from('users').select('*').eq('id', data.user.id).single();\n          if (userCheckError && userCheckError.code === 'PGRST116') {\n            var _data$user$user_metad;\n            // User doesn't exist in our table, create them\n            console.log('User not found in custom table, creating...');\n            const userData = {\n              id: data.user.id,\n              email: data.user.email,\n              username: ((_data$user$user_metad = data.user.user_metadata) === null || _data$user$user_metad === void 0 ? void 0 : _data$user$user_metad.username) || email.split('@')[0],\n              date_joined: new Date().toISOString()\n            };\n            console.log('Attempting to insert user data:', userData);\n            const {\n              error: userInsertError\n            } = await supabase.from('users').insert(userData);\n            if (userInsertError) {\n              console.error('❌ Error creating user in custom table:', userInsertError);\n              console.error('Error details:', JSON.stringify(userInsertError, null, 2));\n            } else {\n              console.log('✅ User created in custom table successfully');\n            }\n          } else if (userCheckError) {\n            console.error('❌ Error checking user in custom table:', userCheckError);\n            console.error('Error details:', JSON.stringify(userCheckError, null, 2));\n          } else {\n            console.log('✅ User already exists in custom table');\n          }\n\n          // Always check if profile exists, regardless of user creation\n          console.log('Checking if profile exists in user_profiles table...');\n          const {\n            data: existingProfile,\n            error: profileCheckError\n          } = await supabase.from('user_profiles').select('*').eq('user_id', data.user.id).single();\n          if (profileCheckError && profileCheckError.code === 'PGRST116') {\n            // Profile doesn't exist, create a default one\n            console.log('Profile not found, creating default profile...');\n            const profileData = {\n              user_id: data.user.id,\n              gender: 'Other',\n              country: 'Unknown',\n              dob: new Date('1990-01-01').toISOString()\n            };\n            console.log('Attempting to insert profile data:', profileData);\n            const {\n              error: profileInsertError\n            } = await supabase.from('user_profiles').insert(profileData);\n            if (profileInsertError) {\n              console.error('❌ Error creating profile:', profileInsertError);\n              console.error('Error details:', JSON.stringify(profileInsertError, null, 2));\n            } else {\n              console.log('✅ Default profile created successfully');\n            }\n          } else if (profileCheckError) {\n            console.error('❌ Error checking profile:', profileCheckError);\n            console.error('Error details:', JSON.stringify(profileCheckError, null, 2));\n          } else {\n            console.log('✅ Profile already exists');\n          }\n          console.log('=== DATA SYNC COMPLETED ===');\n        } catch (syncError) {\n          console.error('❌ Error syncing user data:', syncError);\n          console.error('Sync error details:', JSON.stringify(syncError, null, 2));\n        }\n\n        // Update last_login in the users table\n        try {\n          const {\n            error: updateError\n          } = await supabase.from('users').update({\n            last_login: new Date().toISOString()\n          }).eq('id', data.user.id);\n          if (updateError) {\n            console.error('Error updating last_login:', updateError);\n          }\n        } catch (updateError) {\n          console.error('Error updating last_login:', updateError);\n        }\n\n        // Navigate to home page\n        navigate('/home');\n      }\n    } catch (error) {\n      console.error('Sign in error:', error);\n      setErrorMessage('An unexpected error occurred. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"signin-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"signin-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"signin-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Welcome back\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"signin-subtitle\",\n          children: errorMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"connection-status\",\n          children: /*#__PURE__*/_jsxDEV(\"small\", {\n            children: connectionStatus\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSignIn,\n        className: \"signin-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"email\",\n            children: \"Email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"email\",\n            id: \"email\",\n            value: email,\n            onChange: e => setEmail(e.target.value),\n            placeholder: \"Enter your email\",\n            required: true,\n            className: \"form-input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"password\",\n            children: \"Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"password\",\n            id: \"password\",\n            value: password,\n            onChange: e => setPassword(e.target.value),\n            placeholder: \"Enter your password\",\n            required: true,\n            className: \"form-input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-options\",\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"checkbox-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: rememberMe,\n              onChange: e => setRememberMe(e.target.checked),\n              className: \"checkbox-input\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 257,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"checkmark\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 263,\n              columnNumber: 15\n            }, this), \"Remember me\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          disabled: isLoading,\n          className: \"signin-button\",\n          children: isLoading ? 'Signing in...' : 'Sign in'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"signin-footer\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Don't have an account?\", ' ', /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/signup\",\n            className: \"link\",\n            children: \"Sign up\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 280,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 218,\n    columnNumber: 5\n  }, this);\n};\n_s(SignIn, \"hXHsW6o42eKZAQWRXJ0+wZTjADs=\", false, function () {\n  return [useNavigate];\n});\n_c = SignIn;\nexport default SignIn;\nvar _c;\n$RefreshReg$(_c, \"SignIn\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","Link","supabase","jsxDEV","_jsxDEV","SignIn","_s","email","setEmail","password","setPassword","rememberMe","setRememberMe","isLoading","setIsLoading","errorMessage","setErrorMessage","connectionStatus","setConnectionStatus","navigate","testSupabaseConnection","savedEmail","localStorage","getItem","savedPassword","savedRememberMe","data","error","auth","getUser","console","message","log","tableData","tableError","from","select","limit","handleSignIn","e","preventDefault","signInWithPassword","includes","user","setItem","removeItem","id","user_metadata","existingUser","userCheckError","eq","single","code","_data$user$user_metad","userData","username","split","date_joined","Date","toISOString","userInsertError","insert","JSON","stringify","existingProfile","profileCheckError","profileData","user_id","gender","country","dob","profileInsertError","syncError","updateError","update","last_login","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","type","value","onChange","target","placeholder","required","checked","disabled","to","_c","$RefreshReg$"],"sources":["/Users/jackdooney/Everla Project/src/components/SignIn.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate, Link } from 'react-router-dom';\nimport { supabase } from '../supabase';\nimport './SignIn.css';\n\nconst SignIn = () => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [rememberMe, setRememberMe] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('Enter your details to sign-in');\n  const [connectionStatus, setConnectionStatus] = useState('Testing connection...');\n  const navigate = useNavigate();\n\n  // Test Supabase connection on component mount\n  useEffect(() => {\n    testSupabaseConnection();\n  }, []);\n\n  // Load saved credentials on component mount\n  useEffect(() => {\n    const savedEmail = localStorage.getItem('rememberedEmail');\n    const savedPassword = localStorage.getItem('rememberedPassword');\n    const savedRememberMe = localStorage.getItem('rememberMe') === 'true';\n    \n    if (savedRememberMe && savedEmail && savedPassword) {\n      setEmail(savedEmail);\n      setPassword(savedPassword);\n      setRememberMe(true);\n    }\n  }, []);\n\n  const testSupabaseConnection = async () => {\n    try {\n      // Test basic connection by getting the current user (should return null if not authenticated)\n      const { data, error } = await supabase.auth.getUser();\n      \n      if (error) {\n        console.error('Supabase connection error:', error);\n        setConnectionStatus('❌ Connection failed: ' + error.message);\n      } else {\n        console.log('Supabase connection successful');\n        setConnectionStatus('✅ Connected to Supabase');\n        \n        // Test database access by trying to query the users table\n        try {\n          const { data: tableData, error: tableError } = await supabase\n            .from('users')\n            .select('count')\n            .limit(1);\n          \n          if (tableError) {\n            console.error('Table access error:', tableError);\n            setConnectionStatus('⚠️ Connected but table access issue: ' + tableError.message);\n          } else {\n            setConnectionStatus('✅ Connected to Supabase and database');\n          }\n        } catch (tableError) {\n          console.error('Table test error:', tableError);\n          setConnectionStatus('⚠️ Connected but database access issue');\n        }\n      }\n    } catch (error) {\n      console.error('Connection test error:', error);\n      setConnectionStatus('❌ Connection failed: ' + error.message);\n    }\n  };\n\n  const handleSignIn = async (e) => {\n    e.preventDefault();\n    setIsLoading(true);\n    setErrorMessage('Enter your details to sign-in');\n\n    try {\n      const { data, error } = await supabase.auth.signInWithPassword({\n        email: email,\n        password: password,\n      });\n\n      if (error) {\n        if (error.message.includes('Invalid login credentials')) {\n          setErrorMessage('Invalid email or password. Please try again.');\n        } else if (error.message.includes('Email not confirmed')) {\n          setErrorMessage('Please verify your email address before signing in.');\n        } else {\n          setErrorMessage('An error occurred during sign in. Please try again.');\n        }\n        return;\n      }\n\n      if (data.user) {\n        // Handle remember me functionality\n        if (rememberMe) {\n          localStorage.setItem('rememberedEmail', email);\n          localStorage.setItem('rememberedPassword', password);\n          localStorage.setItem('rememberMe', 'true');\n        } else {\n          localStorage.removeItem('rememberedEmail');\n          localStorage.removeItem('rememberedPassword');\n          localStorage.removeItem('rememberMe');\n        }\n\n        // Check if user exists in our custom tables, if not, create them\n        try {\n          console.log('=== DATA SYNC START ===');\n          console.log('User ID:', data.user.id);\n          console.log('User Email:', data.user.email);\n          console.log('User Metadata:', data.user.user_metadata);\n          \n          // First, check if user exists in our users table\n          console.log('Checking if user exists in users table...');\n          const { data: existingUser, error: userCheckError } = await supabase\n            .from('users')\n            .select('*')\n            .eq('id', data.user.id)\n            .single();\n\n          if (userCheckError && userCheckError.code === 'PGRST116') {\n            // User doesn't exist in our table, create them\n            console.log('User not found in custom table, creating...');\n            \n            const userData = {\n              id: data.user.id,\n              email: data.user.email,\n              username: data.user.user_metadata?.username || email.split('@')[0],\n              date_joined: new Date().toISOString()\n            };\n            \n            console.log('Attempting to insert user data:', userData);\n            \n            const { error: userInsertError } = await supabase\n              .from('users')\n              .insert(userData);\n\n            if (userInsertError) {\n              console.error('❌ Error creating user in custom table:', userInsertError);\n              console.error('Error details:', JSON.stringify(userInsertError, null, 2));\n            } else {\n              console.log('✅ User created in custom table successfully');\n            }\n          } else if (userCheckError) {\n            console.error('❌ Error checking user in custom table:', userCheckError);\n            console.error('Error details:', JSON.stringify(userCheckError, null, 2));\n          } else {\n            console.log('✅ User already exists in custom table');\n          }\n\n          // Always check if profile exists, regardless of user creation\n          console.log('Checking if profile exists in user_profiles table...');\n          const { data: existingProfile, error: profileCheckError } = await supabase\n            .from('user_profiles')\n            .select('*')\n            .eq('user_id', data.user.id)\n            .single();\n\n          if (profileCheckError && profileCheckError.code === 'PGRST116') {\n            // Profile doesn't exist, create a default one\n            console.log('Profile not found, creating default profile...');\n            \n            const profileData = {\n              user_id: data.user.id,\n              gender: 'Other',\n              country: 'Unknown',\n              dob: new Date('1990-01-01').toISOString()\n            };\n            \n            console.log('Attempting to insert profile data:', profileData);\n            \n            const { error: profileInsertError } = await supabase\n              .from('user_profiles')\n              .insert(profileData);\n\n            if (profileInsertError) {\n              console.error('❌ Error creating profile:', profileInsertError);\n              console.error('Error details:', JSON.stringify(profileInsertError, null, 2));\n            } else {\n              console.log('✅ Default profile created successfully');\n            }\n          } else if (profileCheckError) {\n            console.error('❌ Error checking profile:', profileCheckError);\n            console.error('Error details:', JSON.stringify(profileCheckError, null, 2));\n          } else {\n            console.log('✅ Profile already exists');\n          }\n          \n          console.log('=== DATA SYNC COMPLETED ===');\n        } catch (syncError) {\n          console.error('❌ Error syncing user data:', syncError);\n          console.error('Sync error details:', JSON.stringify(syncError, null, 2));\n        }\n\n        // Update last_login in the users table\n        try {\n          const { error: updateError } = await supabase\n            .from('users')\n            .update({ last_login: new Date().toISOString() })\n            .eq('id', data.user.id);\n\n          if (updateError) {\n            console.error('Error updating last_login:', updateError);\n          }\n        } catch (updateError) {\n          console.error('Error updating last_login:', updateError);\n        }\n\n        // Navigate to home page\n        navigate('/home');\n      }\n    } catch (error) {\n      console.error('Sign in error:', error);\n      setErrorMessage('An unexpected error occurred. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"signin-container\">\n      <div className=\"signin-card\">\n        <div className=\"signin-header\">\n          <h1>Welcome back</h1>\n          <p className=\"signin-subtitle\">{errorMessage}</p>\n          <div className=\"connection-status\">\n            <small>{connectionStatus}</small>\n          </div>\n        </div>\n\n        <form onSubmit={handleSignIn} className=\"signin-form\">\n          <div className=\"form-group\">\n            <label htmlFor=\"email\">Email</label>\n            <input\n              type=\"email\"\n              id=\"email\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              placeholder=\"Enter your email\"\n              required\n              className=\"form-input\"\n            />\n          </div>\n\n          <div className=\"form-group\">\n            <label htmlFor=\"password\">Password</label>\n            <input\n              type=\"password\"\n              id=\"password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              placeholder=\"Enter your password\"\n              required\n              className=\"form-input\"\n            />\n          </div>\n\n          <div className=\"form-options\">\n            <label className=\"checkbox-container\">\n              <input\n                type=\"checkbox\"\n                checked={rememberMe}\n                onChange={(e) => setRememberMe(e.target.checked)}\n                className=\"checkbox-input\"\n              />\n              <span className=\"checkmark\"></span>\n              Remember me\n            </label>\n          </div>\n\n          <button\n            type=\"submit\"\n            disabled={isLoading}\n            className=\"signin-button\"\n          >\n            {isLoading ? 'Signing in...' : 'Sign in'}\n          </button>\n        </form>\n\n        <div className=\"signin-footer\">\n          <p>\n            Don't have an account?{' '}\n            <Link to=\"/signup\" className=\"link\">\n              Sign up\n            </Link>\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SignIn; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}